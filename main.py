from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
import os

#–ö–Ω–æ–ø–∫–∏
class Buttons():

    def timetable_button(self):
        return InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="timetable_data")
        
    def app_button(self):
        return InlineKeyboardButton("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url="https://roove.ru/app")
    
    def report_button(self):
        return InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ üíÖ", callback_data="error_data")
    
    def suggest_improvement_button(self):
        return InlineKeyboardButton("–í–∞—à–∏ –∏–¥–µ–∏", callback_data="suggest_improvement_data")
    

#–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
class SpecialButtons():

    def return_button(self):
        return InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="return_data")

#–°–±–æ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
class KeyboardsSpecial():

    def build_a_spectial_buttons(self):
        buttons = SpecialButtons()

        spectial_buttons = buttons.return_button()

        keyboards = [[spectial_buttons]]

        return InlineKeyboardMarkup(keyboards)

#–°–±–æ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫
class Keyboards():

    def build_a_buttons(self):

        #–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ build_buttons
        build_buttons = Buttons()

        #–ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        button_app = build_buttons.app_button()

        #–ö–Ω–æ–ø–∫–∞ –æ—à–∏–±–æ–∫
        button_report = build_buttons.report_button()

        #–ö–Ω–æ–ø–∫–∞ –∂–µ–ª–∞–Ω–∏–π
        button_suggest_improvement = build_buttons.suggest_improvement_button()

        button_timetable = build_buttons.timetable_button()

        #–ú–∞—Å—Å–∏–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboards = [
            [button_app], 
            [button_timetable,], 
            [button_suggest_improvement],
            [button_report]]

        
        return InlineKeyboardMarkup(keyboards)

#–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
class UserDataHandlers():

    #async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    async def button_activity(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        #–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É–∂–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
        button = update.callback_query

        #–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await button.answer()

        data = button.data
        user = button.from_user

        #if button.data == "suggest_improvement_data":
        #    await button.message.reply_text("–ü—Ä–∏–Ω—è–ª")
        #error_data, suggest_improvement_data

        main_markup = Keyboards().build_a_buttons()
        specital_buttons = KeyboardsSpecial().build_a_spectial_buttons()

        match data:
            case "error_data":

                cansel = "–û—Ç–º–µ–Ω–∞"
                await button.message.edit_text(f"–í —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É! –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É {cansel}.", reply_markup=specital_buttons)
                
            case "suggest_improvement_data":
                await button.message.edit_text("–í —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞!",reply_markup=specital_buttons)

            case "timetable_data":
                await button.message.edit_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ", reply_markup=specital_buttons)

            case "return_data":
                await button.message.edit_text("–í —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ, –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –∫—É–¥–∞ –≤–µ—Ä–Ω—ë—Ç–µ—Å—å.", reply_markup=main_markup)

class UserDataHandlersReturn():
    pass


#–°–∞–º –±–æ—Ç
class Bot():

    
    #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    def __init__(self):

        #–¢–æ–∫–µ–Ω –±–æ—Ç–∞
        load_dotenv("token.env")
        self.TOKEN = os.getenv("BOT_TOKEN")
        #–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        self.app = Application.builder().token(self.TOKEN).build()


        #–û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ UserDataHandlers
        self.user_data = UserDataHandlers()

        #–û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Keyboards
        self.buttons = Keyboards()
        #–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        self.app.add_handler(CommandHandler("start", self.start))

        #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        self.app.add_handler(CallbackQueryHandler(self.user_data.button_activity))
        


    #Start
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):

        #–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –∫–ª–∞—Å—Å–æ–º Keyboards –∏ –º–µ—Ç–æ–¥–æ–º build_a_buttons() - —Å–±–æ—Ä–∫–∞
        reply_markup = self.buttons.build_a_buttons()
        #–í—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã Roove! \n–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Ä–∞–∑–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –≤–∞—à–∏ –±–µ—Å–µ–¥—ã –∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! \n –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=reply_markup)

    #–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    def run(self):
        self.app.run_polling()
    

bot = Bot()

bot.run()